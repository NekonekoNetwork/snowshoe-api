// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Namespace {
  id String @id @default(uuid())

  name String @unique @map("name")

  servers   Server[]
  fallbacks Fallback[] @relation("FALLBACKS_NAMESPACE")

  fallback Fallback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  destinations Destination[]

  @@map("namespaces")
}

model Server {
  id String @id @default(uuid())

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String    @map("namespace_id")

  name    String @map("name")
  address String @map("address")
  port    Int    @map("port")

  motd            String?         @map("motd")
  pingPassthrough PingPassthrough @default(NONE) @map("ping_passthrough")

  fallbacks    Fallback[]    @relation("FALLBACKS_SERVER")
  serverStatus ServerStatus?

  fallback Fallback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  destinations Destination[]

  @@unique([namespaceId, name])
  @@map("servers")
}

enum PingPassthrough {
  NONE
  VERSION
  PLAYER
  MOTD
  VERSION_PLAYER
  VERSION_MOTD
  PLAYER_MOTD
  VERSION_PLAYER_MOTD
}

model Fallback {
  id String @id @default(uuid())

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String    @unique @map("namespace_id")

  server   Server? @relation(fields: [serverId], references: [id])
  serverId String? @unique @map("server_id")

  namespaces Namespace[] @relation("FALLBACKS_NAMESPACE")
  servers    Server[]    @relation("FALLBACKS_SERVER")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("fallbacks")
}

model ServerStatus {
  id String @id @default(uuid())

  server   Server @relation(fields: [serverId], references: [id])
  serverId String @unique @map("server_id")

  description String @map("description") @db.Text

  versionName     String @map("version_name")
  versionProtocol String @map("version_protocol")

  playersOnline Int            @map("players_online")
  playersMax    Int            @map("players_max")
  players       SamplePlayer[]

  modInfoType String?     @map("mod_info_type")
  modInfos    SampleMod[]

  favicon String? @map("favicon")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("server_statuses")
}

model SamplePlayer {
  serverStatus   ServerStatus @relation(fields: [serverStatusId], references: [id])
  serverStatusId String       @map("server_status_id")

  name String @map("name")
  id   String @map("id")

  @@id([serverStatusId, id])
  @@map("sample_players")
}

model SampleMod {
  serverStatus   ServerStatus @relation(fields: [serverStatusId], references: [id])
  serverStatusId String       @map("server_status_id")

  name    String @map("name")
  version String @map("version")

  @@id([serverStatusId, name])
  @@map("sample_mods")
}

model VirtualHost {
  id String @id @default(uuid())

  name String @unique @map("name")

  destinations Destination[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("virtual_hosts")
}

model Destination {
  id String @id @default(uuid())

  type DestinationType @map("type")

  namespace   Namespace @relation(fields: [namespaceId], references: [id], onDelete: Cascade)
  namespaceId String    @map("namespace_id")
  server      Server?   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String?   @map("server_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  virtualHosts VirtualHost[]

  @@map("destinations")
}

enum DestinationType {
  NAMESPACE
  SERVER
}

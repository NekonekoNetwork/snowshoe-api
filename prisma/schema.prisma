// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Namespace {
  id   String @id @default(uuid())
  name String @unique

  servers      Server[]
  fallbacks    Fallback[]    @relation("FALLBACKS_NAMESPACE")
  virtualHosts VirtualHost[]

  fallback Fallback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("namespaces")
}

model Server {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  name    String
  address String
  port    Int

  motd            String?
  pingPassthrough PingPassthrough @default(NONE)

  fallbacks    Fallback[]    @relation("FALLBACKS_SERVER")
  serverStatus ServerStatus?
  virtualHosts VirtualHost[]

  fallback Fallback?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([namespaceId, name])
  @@map("servers")
}

enum PingPassthrough {
  NONE
  VERSION
  PLAYER
  MOTD
  VERSION_PLAYER
  VERSION_MOTD
  PLAYER_MOTD
  VERSION_PLAYER_MOTD
}

model Fallback {
  id String @id @default(uuid())

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String    @unique

  server   Server? @relation(fields: [serverId], references: [id])
  serverId String? @unique

  namespaces Namespace[] @relation("FALLBACKS_NAMESPACE")
  servers    Server[]    @relation("FALLBACKS_SERVER")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("fallbacks")
}

model ServerStatus {
  id String @id @default(uuid())

  server   Server @relation(fields: [serverId], references: [id])
  serverId String @unique

  status String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("server_statuses")
}

model VirtualHost {
  id String @id @default(uuid())

  name String @unique

  // Distinatio
  type DestinationType

  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String
  server      Server?   @relation(fields: [serverId], references: [id])
  serverId    String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("virtual_hosts")
}

enum DestinationType {
  NAMESPACE
  SERVER
}

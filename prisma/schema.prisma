// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Yarn 3 + Yarn PnP + Yarn Zeroでうまく動作するように
  // https://github.com/prisma/prisma/issues/1439#issuecomment-1023884266
  output   = "../src/prisma/generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  // SQLiteではEnumをサポートしていないので開発環境ではPostgreSQLとかにする
  // https://www.prisma.io/docs/reference/database-reference/database-features#misc
}

model Namespace {
  id   String @id @default(uuid())
  name String @unique

  Server         Server[]
  VirtualHost    VirtualHost[]
  FallbackServer FallbackServer[]

  @@map("namespaces")
}

model Server {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  name    String
  address String
  port    Int

  motd            String?
  pingPassthrough PingPassthrough @default(NONE)

  ServerStatus   ServerStatus[]
  VirtualHost    VirtualHost[]
  Fallback       Fallback[]
  FallbackServer FallbackServer[]

  @@unique([namespaceId, name])
  @@map("servers")
}

enum PingPassthrough {
  NONE
  VERSION
  PLAYER
  MOTD
  VERSION_PLAYER
  VERSION_MOTD
  PLAYER_MOTD
  VERSION_PLAYER_MOTD
}

model Fallback {
  server   Server @relation(fields: [serverId], references: [id])
  serverId String @id @unique

  FallbackServer FallbackServer[]

  @@map("fallback")
}

model FallbackServer {
  id          String    @id @default(uuid())
  namespace   Namespace @relation(fields: [namespaceId], references: [id])
  namespaceId String

  server   Server? @relation(fields: [serverId], references: [id])
  serverId String

  fallback   Fallback @relation(fields: [fallbackId], references: [serverId])
  fallbackId String

  @@unique([namespaceId, serverId, fallbackId])
  @@map("fallback_servers")
}

model ServerStatus {
  id        String   @id @default(uuid())
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
  status    String
  updatedAt DateTime @updatedAt

  @@map("server_statuses")
}

model VirtualHost {
  id   String @id @default(uuid())
  name String @unique

  // Distinatio
  type        DestinationType
  namespace   Namespace       @relation(fields: [namespaceId], references: [id])
  namespaceId String
  server      Server?         @relation(fields: [serverId], references: [id])
  serverId    String?

  @@map("virtual_hosts")
}

enum DestinationType {
  NAMESPACE
  SERVER
}
